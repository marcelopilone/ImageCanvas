{"version":3,"file":"SetText.setter.js","sourceRoot":"","sources":["../../src/setters/SetText.setter.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,cAAc,EAAE,MAAM,mBAAmB,CAAC;AAEnD,MAAM,OAAO,OAAQ,SAAQ,cAAc;EAEvC,KAAK,CAAC,GAAG;IACL,IAAI,CAAC,aAAa,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,SAAS,CAAC;IAClE,IAAI,CAAC,aAAa,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC;IACxD,IAAI,CAAC,aAAa,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,SAA4B,CAAC;IACrF,IAAG,UAAU,IAAI,IAAI,CAAC,KAAK,CAAC,aAAa,EAAC;MACtC,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;MACvC,IAAI,IAAI,GAAG,EAAE,CAAC;MACd,IAAI,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;MAE1B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACnC,IAAI,QAAQ,GAAG,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;QACrC,OAAO,CAAC,GAAG,CAAC,kBAAkB,EAAE,QAAQ,CAAC,CAAC;QAC1C,IAAI,OAAO,GAAG,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;QACvD,OAAO,CAAC,GAAG,CAAC,mBAAmB,EAAC,OAAO,CAAC,CAAC;QACzC,IAAI,SAAS,GAAG,OAAO,CAAC,KAAK,CAAC;QAC9B,OAAO,CAAC,GAAG,CAAC,kBAAkB,EAAE,SAAS,CAAC,CAAC;QAE3C,IAAG,SAAS,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,EAAC;UAC9D,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;UACxD,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;UACtB,MAAM,GAAG,MAAM,GAAG,EAAE,CAAC;SACxB;aAAI;UACD,IAAI,GAAG,QAAQ,CAAC;SACnB;OACJ;MACD,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;KAC3D;SAAI;MACD,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;KAC5E;EAEL,CAAC;CACJ","sourcesContent":["import { ContentDataText } from \"../components/type\";\nimport { AbstractSetter } from \"./Abstract.setter\";\n\nexport class SetText extends AbstractSetter {\n    layer: ContentDataText\n    async run() {\n        this.canvasContent.fillStyle = this.layer.canvasOptions.fillStyle;\n        this.canvasContent.font = this.layer.canvasOptions.font;\n        this.canvasContent.textAlign = this.layer.canvasOptions.textAlign as CanvasTextAlign;\n        if('maxWidth' in this.layer.canvasOptions){\n            let words = this.layer.data.split(' ');\n            let line = '';\n            let startY = this.layer.y;\n\n            for (let i = 0; i < words.length; i++) {\n                let testLine = line + words[i] + ' ';\n                console.log('el test line es ', testLine);\n                let metrics = this.canvasContent.measureText(testLine);\n                console.log('las metricas son ',metrics);\n                let testWidth = metrics.width;\n                console.log('prueba de ancho ', testWidth);\n\n                if(testWidth > Number(this.layer.canvasOptions.maxWidth) && i > 0){\n                    this.canvasContent.fillText(line, this.layer.x, startY);\n                    line = words[i] + ' ';\n                    startY = startY + 20;\n                }else{\n                    line = testLine;\n                }\n            }\n            this.canvasContent.fillText(line, this.layer.x, startY);\n        }else{\n            this.canvasContent.fillText(this.layer.data, this.layer.x, this.layer.y);\n        }\n        \n    }\n}"]}