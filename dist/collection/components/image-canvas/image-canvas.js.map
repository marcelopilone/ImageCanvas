{"version":3,"file":"image-canvas.js","sourceRoot":"","sources":["../../../src/components/image-canvas/image-canvas.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,IAAI,EAAC,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,EAAE,MAAM,eAAe,CAAC;AAEzE,OAAO,EAAE,YAAY,EAAE,MAAM,4BAA4B,CAAC;AAO1D,MAAM,OAAO,WAAW;;;;2BAiBY,OAAO;kBAKf,EAAE;sBAON,IAAI;;EAL1B,kBAAkB;IAChB,IAAI,CAAC,UAAU,EAAE,CAAA;EACnB,CAAC;EAMD,KAAK,CAAC,iBAAiB;IACrB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;IACpC,IAAI,CAAC,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;IAChC,MAAM,IAAI,CAAC,UAAU,EAAE,CAAA;EACzB,CAAC;EAED,cAAc;IACZ,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAA;IAC9C,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;IACjC,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;IAC/B,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,GAAG,MAAM,CAAC;IACjC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,GAAG,MAAM,CAAC;IAClC,OAAO,IAAI,CAAC,MAAM,CAAA;EACpB,CAAC;EAGD,KAAK,CAAC,UAAU;IACX,MAAM,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;IACzC,IAAI,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC;IACtB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;MACpC,MAAM,YAAY,CAAC,GAAG,EAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAA;KAChC;EACP,CAAC;EAED,MAAM;IACJ,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,IAAI,CAAC,EAAE;MAC3B,OAAO,SAAG,KAAK,EAAE,EAAC,OAAO,EAAC,KAAK,EAAC,wFAAqF,CAAA;KACtH;EACH,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAEF","sourcesContent":["import { Component, Prop,State, Element, Watch, h } from '@stencil/core';\nimport { Layer } from '../type';\nimport { canvasSetter } from '../../setters/utils.setter';\n\n@Component({\n  tag: 'image-canvas',\n  styleUrl: 'image-canvas.css',\n  shadow: false,\n})\nexport class ImageCanvas {\n\n  @Element() el: HTMLElement\n\n  /**\n   * Width number\n   */\n  @Prop() width!: number\n\n  /**\n   * Height number\n   */\n  @Prop() height!: number\n\n  /**\n   * Canvas fillStroke\n   */\n  @Prop() canvasFillStyle: string = 'black'\n\n  /**\n   * canvas.content \n   */\n  @Prop() layers: Layer[] = []\n  @Watch('layers')\n  handlerLayerChange(){\n    this.__loadData()\n  }\n  \n\n  @State() imgLoading = true;\n  private canvas: HTMLCanvasElement\n\n  async componentWillLoad(){\n    this.canvas = this.__createCanvas();\n    this.el.appendChild(this.canvas)\n    await this.__loadData()\n  }\n\n  __createCanvas() {\n    this.canvas = document.createElement('canvas')\n    this.canvas.height = this.height;\n    this.canvas.width = this.width;\n    this.canvas.style.width = \"100%\";\n    this.canvas.style.height = \"100%\";\n    return this.canvas\n  }\n\n\n  async __loadData() {\n       const ctx = this.canvas.getContext('2d');\n       let data = this.layers;\n        for (var i = 0; i < data.length; i++) {\n          await canvasSetter(ctx,data[i])\n        }\n  }\n\n  render() {\n    if (this.layers.length == 0) {\n      return <p style={{\"color\":\"red\"}}>ERR: Debe ejecutar $(\"image-cangas\").layers = layers[] para poder mostrar algo)</p>\n    }\n  }\n\n}\n"]}